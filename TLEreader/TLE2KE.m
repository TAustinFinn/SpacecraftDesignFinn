%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: D:\Users\Austin\Documents\GitHub\SpacecraftDesignFinn\TLEreader\TLE.txt
%
% Auto-generated by MATLAB on 02-Feb-2021 16:34:56

%% Setup the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 9);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = " ";

% Specify column names and types
opts.VariableNames = ["TLE", "for1", "ISS", "ZARYA", "VarName5", "VarName6", "VarName7", "VarName8", "VarName9"];
opts.VariableTypes = ["double", "string", "string", "string", "string", "string", "string", "string", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";
opts.ConsecutiveDelimitersRule = "join";
opts.LeadingDelimitersRule = "ignore";

% Specify variable properties
opts = setvaropts(opts, ["for1", "ISS", "ZARYA", "VarName5", "VarName6", "VarName7", "VarName8", "VarName9"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["for1", "ISS", "ZARYA", "VarName5", "VarName6", "VarName7", "VarName8", "VarName9"], "EmptyFieldRule", "auto");

% Import the data
TLE1 = readtable("D:\Users\Austin\Documents\GitHub\SpacecraftDesignFinn\TLEreader\TLE.txt", opts);


%% Clear temporary variables
clear opts

% end autogenerated code
%% store orbital elements variables, converting deg to rad as necessary

% grav parameter for Earth
mu = 3.986e14;

inc = str2double(TLE1{2,3})*pi/180;
raan = str2double(TLE1{2,4})*pi/180;
ecc = str2double("."+TLE1{2,5});
argperi = str2double(TLE1{2,6})*pi/180;
meananom = str2double(TLE1{2,7})*pi/180;
semi = (mu/(str2double(TLE1{2,8})*2*pi/86400)^2)^(1/3);

%% get pos and vel vectors in ECI frame from OE
% oe2vec function at end of file

[pos,vel] = ele2vec(semi,ecc,inc,argperi,raan,meananom);

% write text file

fileID = fopen('KERV.txt','wt');

fprintf(fileID,'%s %.4f %.4f %.4f %s\n','Position',pos/1000','(km)');
fprintf(fileID,'%s %.4f %.4f %.4f %s','Velocity',vel/1000','(km/sec)');

fclose(fileID);


%% orbital elements to ECI vectors function
function [pos,vel] = ele2vec(a,ecc,inc,argperi,raan,M)
    mu = 3.986e14;
    
    % use newton's method to convert mean anomaly to true anomaly
    E0 = M;
    dE = -(E0-ecc*sin(E0)-M)/(1-ecc*cos(E0));
    
    % cur tolerance set to 10^-9
    while abs(dE) > 10^(-9)
        E1 = E0 + dE;
        dE = -(E1-ecc*sin(E1)-M)/(1-ecc*cos(E1));
        E0 = E1;
    end
    f = acos((cos(E0)-ecc)/(1-ecc*cos(E0)));
    % check correct half of ellipse
    if E0 > pi
        f = 2*pi - f;
    end
    
    % semi parameter
    p = a*(1-ecc^2);
    
    % calculate pos, vel in perifocal frame
    peripos = p/(1+ecc*cos(f))*[cos(f);sin(f);0];
    perivel = sqrt(mu/p)*[-sin(f);ecc+cos(f);0];
    
    % rotate vectors to ECI frame using inc, RAAN, and arg peri
    % have to transpose rotation matrices because matlab defines the
    % rotation opposite of what I'm used to and I also want to keep track
    % that the input is negative of the angle
    pos = rotz(-raan*180/pi)'*rotx(-inc*180/pi)'*rotz(-argperi*180/pi)'...
        *peripos;
    vel = rotz(-raan*180/pi)'*rotx(-inc*180/pi)'*rotz(-argperi*180/pi)'...
        *perivel;
end